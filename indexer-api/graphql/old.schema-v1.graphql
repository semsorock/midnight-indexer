"""
A block with its relevant data.
"""
type Block {
	"""
	The block hash.
	"""
	hash: HexEncoded!
	"""
	The block height.
	"""
	height: Int!
	"""
	The protocol version.
	"""
	protocolVersion: Int!
	"""
	The UNIX timestamp.
	"""
	timestamp: Int!
	"""
	The block author.
	"""
	author: HexEncoded
	"""
	The parent of this block.
	"""
	parent: Block
	"""
	The transactions within this block.
	"""
	transactions: [Transaction!]!
}

"""
Either a hash or a height to query a block.
"""
input BlockOffset @oneOf {
	hash: HexEncoded
	height: Int
}

"""
A contract action.
"""
interface ContractAction {
	address: HexEncoded!
	state: HexEncoded!
	chainState: HexEncoded!
	transaction: Transaction!
}

"""
Either a block offset or a transaction offset to query a contract action.
"""
input ContractActionOffset @oneOf {
	blockOffset: BlockOffset
	transactionOffset: TransactionOffset
}

"""
A contract call.
"""
type ContractCall implements ContractAction {
	address: HexEncoded!
	state: HexEncoded!
	chainState: HexEncoded!
	entryPoint: HexEncoded!
	transaction: Transaction!
	deploy: ContractDeploy!
}

"""
A contract deployment.
"""
type ContractDeploy implements ContractAction {
	address: HexEncoded!
	state: HexEncoded!
	chainState: HexEncoded!
	transaction: Transaction!
}

"""
A contract update.
"""
type ContractUpdate implements ContractAction {
	address: HexEncoded!
	state: HexEncoded!
	chainState: HexEncoded!
	transaction: Transaction!
}

scalar HexEncoded

type MerkleTreeCollapsedUpdate {
	"""
	The protocol version.
	"""
	protocolVersion: Int!
	"""
	The start index into the zswap state.
	"""
	start: Int!
	"""
	The end index into the zswap state.
	"""
	end: Int!
	"""
	The hex-encoded merkle-tree collapsed update.
	"""
	update: HexEncoded!
}

type Mutation {
	"""
	Connect the wallet with the given viewing key and return a session ID.
	"""
	connect(viewingKey: ViewingKey!): HexEncoded!
	"""
	Disconnect the wallet with the given session ID.
	"""
	disconnect(sessionId: HexEncoded!): Unit!
}

"""
Aggregates information about the wallet indexing progress.
"""
type ProgressUpdate {
	"""
	The highest end index into the zswap state of all currently known transactions.
	"""
	highestIndex: Int!
	"""
	The highest end index into the zswap state of all currently known relevant transactions,
	i.e. those that belong to any known wallet. Less or equal `highest_index`.
	"""
	highestRelevantIndex: Int!
	"""
	The highest end index into the zswap state of all currently known relevant transactions for
	a particular wallet. Less or equal `highest_relevant_index`.
	"""
	highestRelevantWalletIndex: Int!
}

type Query {
	"""
	Find a block for the given optional offset; if not present, the latest block is returned.
	"""
	block(offset: BlockOffset): Block
	"""
	Find transactions for the given offset.
	"""
	transactions(offset: TransactionOffset!, address: UnshieldedAddress): [Transaction!]!
	"""
	Find a contract action for the given address and optional offset.
	"""
	contractAction(address: HexEncoded!, offset: ContractActionOffset): ContractAction
	"""
	Retrieve all unshielded UTXOs (both spent and unspent) associated with a given address.
	"""
	unshieldedUtxos(address: UnshieldedAddress!, offset: UnshieldedOffset): [UnshieldedUtxo!]!
}

type RelevantTransaction {
	"""
	Relevant transaction for the wallet.
	"""
	transaction: Transaction!
	"""
	The start index.
	"""
	start: Int!
	"""
	The end index.
	"""
	end: Int!
}

"""
One of many segments for a partially successful transaction result showing success for some
segment.
"""
type Segment {
	"""
	Segment ID.
	"""
	id: Int!
	"""
	Successful or not.
	"""
	success: Boolean!
}

"""
Result for a specific segment within a transaction.
"""
type SegmentResult {
	"""
	The segment identifier.
	"""
	segmentId: Int!
	"""
	Whether this segment was successfully executed.
	"""
	success: Boolean!
}

type Subscription {
	"""
	Subscribe to blocks starting at the given offset or at the latest block if the offset is
	omitted.
	"""
	blocks(offset: BlockOffset): Block!
	"""
	Subscribe to contract actions with the given address starting at the given offset or at the
	latest block if the offset is omitted.
	"""
	contractActions(address: HexEncoded!, offset: BlockOffset): ContractAction!
	"""
	Subscribe to wallet events for the given session ID starting at the given index or at zero
	if the index is omitted. Wallet events are either a ViewingUpdate or a ProgressUpdate.
	"""
	wallet(sessionId: HexEncoded!, index: Int, sendProgressUpdates: Boolean): WalletSyncEvent!
	"""
	Subscribes to unshielded UTXO events for a specific address.
	
	Emits events whenever unshielded UTXOs are created or spent for the given address.
	Each event includes the transaction details and lists of created/spent UTXOs.
	
	# Arguments
	* `address` - The unshielded address to monitor (must be in Bech32m format)
	
	# Returns
	A stream of `UnshieldedUtxoEvent`s containing:
	- `progress`: Progress information for wallet synchronization (always present)
	- `transaction`: The transaction that created/spent UTXOs (None for progress-only events)
	- `createdUtxos`: UTXOs created in this transaction for the address (None for progress-only
	events)
	- `spentUtxos`: UTXOs spent in this transaction for the address (None for progress-only
	events)
	"""
	unshieldedUtxos(address: UnshieldedAddress!): UnshieldedUtxoEvent!
}

"""
A transaction with its relevant data.
"""
type Transaction {
	"""
	The transaction hash.
	"""
	hash: HexEncoded!
	"""
	The protocol version.
	"""
	protocolVersion: Int!
	"""
	The result of applying a transaction to the ledger state.
	"""
	transactionResult: TransactionResult!
	"""
	Fee information for this transaction.
	"""
	fees: TransactionFees!
	"""
	Segment results for client consumption.
	"""
	segmentResults: [SegmentResult!]!
	"""
	The transaction identifiers.
	"""
	identifiers: [HexEncoded!]!
	"""
	The raw transaction content.
	"""
	raw: HexEncoded!
	"""
	The merkle-tree root.
	"""
	merkleTreeRoot: HexEncoded!
	"""
	The block for this transaction.
	"""
	block: Block!
	"""
	The contract actions.
	"""
	contractActions: [ContractAction!]!
	"""
	Unshielded UTXOs created by this transaction.
	"""
	unshieldedCreatedOutputs: [UnshieldedUtxo!]!
	"""
	Unshielded UTXOs spent (consumed) by this transaction.
	"""
	unshieldedSpentOutputs: [UnshieldedUtxo!]!
}

"""
Fees information for a transaction, including both paid and estimated fees.
"""
type TransactionFees {
	"""
	The actual fees paid for this transaction in DUST.
	"""
	paidFees: String!
	"""
	The estimated fees that was calculated for this transaction in DUST.
	"""
	estimatedFees: String!
}

"""
Either a hash or an identifier to query transactions.
"""
input TransactionOffset @oneOf {
	hash: HexEncoded
	identifier: HexEncoded
}

"""
The result of applying a transaction to the ledger state.
In case of a partial success (status), there will be segments.
"""
type TransactionResult {
	status: TransactionResultStatus!
	segments: [Segment!]
}

"""
The status of the transaction result: success, partial success or failure.
"""
enum TransactionResultStatus {
	SUCCESS
	PARTIAL_SUCCESS
	FAILURE
}

scalar Unit

scalar UnshieldedAddress

"""
Either a [BlockOffset] or a [TransactionOffset] to query for a [UnshieldedUtxo].
"""
input UnshieldedOffset @oneOf {
	blockOffset: BlockOffset
	transactionOffset: TransactionOffset
}

"""
Progress tracking information for unshielded token synchronization.
"""
type UnshieldedProgress {
	"""
	The highest end index of all currently known transactions
	"""
	highestIndex: Int!
	"""
	The current end index for this address
	"""
	currentIndex: Int!
}

"""
Represents an unshielded UTXO.
"""
type UnshieldedUtxo {
	"""
	Owner address (Bech32m, `mn_addr…`)
	"""
	owner: UnshieldedAddress!
	"""
	The hash of the intent that created this output (hex-encoded)
	"""
	intentHash: HexEncoded!
	"""
	UTXO value (quantity) as a string to support u128
	"""
	value: String!
	"""
	Token type (hex-encoded)
	"""
	tokenType: HexEncoded!
	"""
	Index of this output within its creating transaction
	"""
	outputIndex: Int!
	"""
	Transaction that created this UTXO
	"""
	createdAtTransaction: Transaction
	"""
	Transaction that spent this UTXO, if spent
	"""
	spentAtTransaction: Transaction
}

"""
Payload emitted by `subscription { unshieldedUtxos … }`
"""
type UnshieldedUtxoEvent {
	"""
	Progress information for wallet synchronization (always present)
	"""
	progress: UnshieldedProgress!
	"""
	The transaction associated with this event (present for actual updates)
	"""
	transaction: Transaction
	"""
	UTXOs created in this transaction for the subscribed address (None for progress-only
	events)
	"""
	createdUtxos: [UnshieldedUtxo!]
	"""
	UTXOs spent in this transaction for the subscribed address (None for progress-only events)
	"""
	spentUtxos: [UnshieldedUtxo!]
}

scalar ViewingKey

"""
Aggregates a relevant transaction with the next start index and an optional collapsed
Merkle-Tree update.
"""
type ViewingUpdate {
	"""
	Next start index into the zswap state to be queried. Usually the end index of the included
	relevant transaction plus one unless that is a failure in which case just its end
	index.
	"""
	index: Int!
	"""
	Relevant transaction for the wallet and maybe a collapsed Merkle-Tree update.
	"""
	update: [ZswapChainStateUpdate!]!
}

union WalletSyncEvent = ViewingUpdate | ProgressUpdate

union ZswapChainStateUpdate = MerkleTreeCollapsedUpdate | RelevantTransaction

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
"""
Indicates that an Input Object is a OneOf Input Object (and thus requires exactly one of its field be provided)
"""
directive @oneOf on INPUT_OBJECT
"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}

